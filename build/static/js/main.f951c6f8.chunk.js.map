{"version":3,"sources":["components/CharacterDisplay.js","App.js","serviceWorker.js","index.js"],"names":["CharacterDisplay","props","react_default","a","createElement","className","alt","id","src","image","onClick","characterClicked","App","state","characters","Object","toConsumableArray","currentScore","highestScore","gameOver","gameStart","charArray","_this","index","findIndex","character","clicked","setState","newArray","map","item","setTimeout","shuffle","console","log","random","temp","length","Math","floor","_this2","this","components_CharacterDisplay","key","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f951c6f8.chunk.js","sourcesContent":["import React from \"react\"\r\nimport \"./style.css\"\r\n\r\nconst CharacterDisplay = props => (\r\n    <div className=\"card charCard\" >\r\n        <img className=\"cardImg img-thumbnail\" alt={props.id} src={props.image} onClick={() => props.characterClicked(props.id)}/>\r\n    </div>\r\n);\r\n\r\n\r\nexport default CharacterDisplay;","import React from 'react';\nimport './App.css';\nimport characters from \"./characters.json\"\nimport CharacterDisplay from \"./components/CharacterDisplay\"\n\nclass App extends React.Component {\n    state = {\n        characters: [...characters],\n        currentScore: 0,\n        highestScore: 0,\n        gameOver: false,\n        gameStart: false\n    }\n\n    characterClicked = (id) => {\n        var charArray = [...this.state.characters];\n        var index = this.state.characters.findIndex(character => {\n            return character.id === id;\n        });\n\n        if (this.state.characters[index].clicked === false) {\n            charArray[index].clicked = true;\n            this.setState(() => ({\n                gameStart: true,\n                characters: charArray,\n                currentScore: this.state.currentScore + 1\n            }));\n        }\n        else {\n            if (this.state.highestScore < this.state.currentScore) {\n                this.setState({ highestScore: this.state.currentScore })\n            }\n\n            const newArray = this.state.characters.map(item => {\n                item.clicked = false;\n                return item;\n            })\n\n            this.setState({\n                currentScore: 0,\n                characters: [...newArray],\n                gameOver: true\n            });\n\n            setTimeout(() => { this.setState({ gameOver: false, gameStart: false }) }, 2000);\n        }\n\n        this.shuffle();\n        console.log(this.state.characters)\n    };\n\n    shuffle = () => {\n        var newArray = [...this.state.characters];\n        var random, temp, index;\n        for (index = newArray.length - 1; index > 0; index--) {\n            random = Math.floor(Math.random() * (index + 1));\n            temp = newArray[index];\n            newArray[index] = newArray[random];\n            newArray[random] = temp;\n        }\n        this.setState({ characters: newArray })\n    }\n\n    render() {\n        return (\n            <div className=\"main-div\">\n                <div className=\"navbar\">\n                    <ul className=\"nav\">\n                        <li className=\"nav-item nav-title\">Memory Game</li>\n                        <li className=\"nav-item\">{this.state.gameStart ? (this.state.gameOver ? \"Already clicked! Game Over!\" : \"You guessed correctly!\") : \"Click an image to start the game!\"}</li>\n                        <li className=\"nav-item\">\n                            <span className=\"score-span\">Score: {this.state.currentScore}  </span>\n                            <span>Highest Score: {this.state.highestScore}</span>\n                        </li>\n                    </ul>\n                </div>\n                <header className=\"header\">\n                    <h1 className=\"display-4\">Memory Game</h1>\n                </header>\n                <div className=\"row\">\n                    <div className=\"col-md-2\"></div>\n                    <div className={this.state.gameOver ? \"col-md-8 img-container img-shake\" : \"col-md-8 img-container\"}>\n\n                        {this.state.characters.map(item => {\n                            return (<CharacterDisplay\n                                key={item.id}\n                                id={item.id}\n                                image={item.image}\n                                characterClicked={this.characterClicked}\n                            />)\n                        })}\n                    </div>\n                    <div className=\"col-md-2\"></div>\n                </div>\n            </div>\n        )\n    }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}